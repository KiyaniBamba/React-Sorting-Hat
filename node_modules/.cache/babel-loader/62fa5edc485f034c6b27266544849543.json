{"ast":null,"code":"import _defineProperty from \"/Users/kiyanibamba/Documents/GitHub/React-Sorting-Hat/react-sorting-hat/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/kiyanibamba/Documents/GitHub/React-Sorting-Hat/react-sorting-hat/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport './App.css';\nimport update from 'react-addons-update';\nimport PoudlardLogo from './Design elements/';\nimport quizQuestions from './Components/QuizQuestion';\nimport Question from './Components/Questions.js';\nimport Quiz from './Components/Quiz.js';\nimport Result from './Components/Result.js';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      counter: 0,\n      questionId: 1,\n      question: '',\n      answerOptions: [],\n      answer: '',\n      answersCount: {},\n      result: ''\n    };\n    this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\n  }\n\n  componentDidMount() {\n    const shuffledAnswerOptions = quizQuestions.map(question => this.shuffleArray(question.answers));\n    this.setState({\n      question: quizQuestions[0].question,\n      answerOptions: shuffledAnswerOptions[0]\n    });\n  }\n\n  shuffleArray(array) {\n    var currentIndex = array.length,\n        temporaryValue,\n        randomIndex; // While there remain elements to shuffle...\n\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1; // And swap it with the current element.\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  handleAnswerSelected(event) {\n    this.setUserAnswer(event.currentTarget.value);\n\n    if (this.state.questionId < quizQuestions.length) {\n      setTimeout(() => this.setNextQuestion(), 300);\n    } else {\n      setTimeout(() => this.setResults(this.getResults()), 300);\n    }\n  }\n\n  setUserAnswer(answer) {\n    this.setState((state, props) => ({\n      answersCount: _objectSpread({}, state.answersCount, {\n        [answer]: (state.answersCount[answer] || 0) + 1\n      }),\n      answer: answer\n    }));\n  }\n\n  setNextQuestion() {\n    const counter = this.state.counter + 1;\n    const questionId = this.state.questionId + 1;\n    this.setState({\n      counter: counter,\n      questionId: questionId,\n      question: quizQuestions[counter].question,\n      answerOptions: quizQuestions[counter].answers,\n      answer: ''\n    });\n  }\n\n  getResults() {\n    const answersCount = this.state.answersCount;\n    const answersCountKeys = Object.keys(answersCount);\n    const answersCountValues = answersCountKeys.map(key => answersCount[key]);\n    const maxAnswerCount = Math.max.apply(null, answersCountValues);\n    return answersCountKeys.filter(key => answersCount[key] === maxAnswerCount);\n  }\n\n  setResults(result) {\n    if (result.length === 1) {\n      this.setState({\n        result: result[0]\n      });\n    } else {\n      this.setState({\n        result: 'Undetermined'\n      });\n    }\n  }\n\n  renderQuiz() {\n    return React.createElement(Quiz, {\n      answer: this.state.answer,\n      answerOptions: this.state.answerOptions,\n      questionId: this.state.questionId,\n      question: this.state.question,\n      questionTotal: quizQuestions.length,\n      onAnswerSelected: this.handleAnswerSelected,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    });\n  }\n\n  renderResult() {\n    return React.createElement(Result, {\n      quizResult: this.state.result,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"App-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Welcome to Hogwart\")), this.state.result ? this.renderResult() : this.renderQuiz());\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/kiyanibamba/Documents/GitHub/React-Sorting-Hat/react-sorting-hat/src/App.js"],"names":["React","Component","update","PoudlardLogo","quizQuestions","Question","Quiz","Result","App","constructor","props","state","counter","questionId","question","answerOptions","answer","answersCount","result","handleAnswerSelected","bind","componentDidMount","shuffledAnswerOptions","map","shuffleArray","answers","setState","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","event","setUserAnswer","currentTarget","value","setTimeout","setNextQuestion","setResults","getResults","answersCountKeys","Object","keys","answersCountValues","key","maxAnswerCount","max","apply","filter","renderQuiz","renderResult","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport update from 'react-addons-update';\n\nimport PoudlardLogo from './Design elements/';\nimport quizQuestions from './Components/QuizQuestion';\nimport Question from './Components/Questions.js';\nimport Quiz from './Components/Quiz.js';\nimport Result from './Components/Result.js';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      counter: 0,\n      questionId: 1,\n      question: '',\n      answerOptions: [],\n      answer: '',\n      answersCount: {},\n      result: ''\n    };\n\n    this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\n  }\n\n  componentDidMount() {\n    const shuffledAnswerOptions = quizQuestions.map(question =>\n      this.shuffleArray(question.answers)\n    );\n    this.setState({\n      question: quizQuestions[0].question,\n      answerOptions: shuffledAnswerOptions[0]\n    });\n  }\n\n  shuffleArray(array) {\n    var currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  handleAnswerSelected(event) {\n    this.setUserAnswer(event.currentTarget.value);\n\n    if (this.state.questionId < quizQuestions.length) {\n      setTimeout(() => this.setNextQuestion(), 300);\n    } else {\n      setTimeout(() => this.setResults(this.getResults()), 300);\n    }\n  }\n\n  setUserAnswer(answer) {\n    this.setState((state, props) => ({\n      answersCount: {\n        ...state.answersCount,\n        [answer]: (state.answersCount[answer] || 0) + 1\n      },\n      answer: answer\n    }));\n  }\n\n  setNextQuestion() {\n    const counter = this.state.counter + 1;\n    const questionId = this.state.questionId + 1;\n\n    this.setState({\n      counter: counter,\n      questionId: questionId,\n      question: quizQuestions[counter].question,\n      answerOptions: quizQuestions[counter].answers,\n      answer: ''\n    });\n  }\n\n  getResults() {\n    const answersCount = this.state.answersCount;\n    const answersCountKeys = Object.keys(answersCount);\n    const answersCountValues = answersCountKeys.map(key => answersCount[key]);\n    const maxAnswerCount = Math.max.apply(null, answersCountValues);\n\n    return answersCountKeys.filter(key => answersCount[key] === maxAnswerCount);\n  }\n\n  setResults(result) {\n    if (result.length === 1) {\n      this.setState({ result: result[0] });\n    } else {\n      this.setState({ result: 'Undetermined' });\n    }\n  }\n\n  renderQuiz() {\n    return (\n      <Quiz\n        answer={this.state.answer}\n        answerOptions={this.state.answerOptions}\n        questionId={this.state.questionId}\n        question={this.state.question}\n        questionTotal={quizQuestions.length}\n        onAnswerSelected={this.handleAnswerSelected}\n      />\n    );\n  }\n\n  renderResult() {\n    return <Result quizResult={this.state.result} />;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n          <h1 className=\"App-title\">Welcome to Hogwart</h1>\n        </header>\n        {this.state.result ? this.renderResult() : this.renderQuiz()}\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}